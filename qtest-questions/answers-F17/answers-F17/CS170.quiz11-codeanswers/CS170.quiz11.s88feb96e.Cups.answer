public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:

        System.out.println("------Test Coffee------");
        Cup c1 = new CoffeeCup(300, 20, 30);
        System.out.println(c1);
        System.out.println(c1.takeOneSip());
        System.out.println(c1);
        c1.addLiquid(230); //volume is now 20 + 230 = 250 because 0 is returned in the sip --> liquid is still in cup
        System.out.println(c1);
        System.out.println(c1.takeOneSip());
        System.out.println(c1);

        System.out.print("\n");

        System.out.println("------Test Tea------");
        Cup c2 = new TeaCup(150, 30, 50);
        System.out.println(c2);
        System.out.println(c2.takeOneSip());
        System.out.println(c2);
        c2.addLiquid(60); //volume is now 60 + 30 = 90 because 0 is returned in the sip --> liquid is still in cup
        System.out.println(c2);
        System.out.println(c2.takeOneSip());
        System.out.println(c2);

        System.out.print("\n");

        System.out.println("------Test Espresso------");
        Cup c3 = new EspressoCup(80, 5, 10);
        System.out.println(c3);
        System.out.println(c3.takeOneSip());
        System.out.println(c3);
        c3.addLiquid(45); //volume is now 45 because the 5 ml was released (unlike previous two)
        System.out.println(c3);
        System.out.println(c3.takeOneSip());
        System.out.println(c3);

    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup {
    // attributes
    protected double cap; //add visibility modifier here
    protected double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public abstract double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given
class CoffeeCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        this.sipsize = s;
        super.cap = c;
        super.volume = v;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if (super.volume < sipsize) {
            return 0;
        } else {
            super.volume -= sipsize;
            return sipsize;   
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of coffee.";
    }
}

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        this.sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if (super.volume < sipsize) {
            return 0;
        } else {
            super.volume -= sipsize;
            return sipsize;   
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of tea."; 
    }
}

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        this.sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if (super.volume >= sipsize) {
            super.volume -= sipsize;
            return sipsize;
        } else {
            double result = super.volume;
            super.volume = 0;
            return result;  
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of espresso."; 
    }
}