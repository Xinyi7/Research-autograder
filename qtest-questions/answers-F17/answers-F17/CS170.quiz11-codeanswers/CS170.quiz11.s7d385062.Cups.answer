public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
        // Cup c1 = new CoffeeCup(300, 250, 30);
        Cup c1= new CoffeeCup(300, 250,30);
        Cup c2= new TeaCup(350,275,20);
        Cup c3=new EspressoCup(50,45,10);

    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup {
    // attributes
    protected double cap; //add visibility modifier here
   protected double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    abstract public double takeOneSip();
     
}

// CoffeeCup class: add what is missing based on the diagram given
class CoffeeCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
       this.cap=c;
       this.volume=v;
       this.sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
       if(volume<sipsize){
        return 0;
       }else{
        volume-=sipsize;
        return sipsize;
       }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        System.out.println("My Coffe Cup has "+ volume+ "ml in it.");
        return null;
    }
}

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
       this.cap=c;
       this.volume=v;
       this.sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
       if(volume<sipsize){
        return 0;
       }else{
        volume-=sipsize;
        return sipsize;
       }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        System.out.println("My tea cup has "+ volume+" ml of tea in it.");
        return null; 
    }
}

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup{
    // attributes
   private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
       this.cap=c;
       this.volume=v;
       this.sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
       if(volume<sipsize){
        return 0;
       }else{
        volume-=sipsize;
        return sipsize;
       }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        System.out.println("My espresso cup has" +volume+" ml of espresso in it.");
        return null; 
    }
}