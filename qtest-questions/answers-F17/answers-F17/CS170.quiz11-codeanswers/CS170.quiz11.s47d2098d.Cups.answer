abstract public class Main { //abstract modifier 1/1 Y.
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
        // Cup c1 = new CoffeeCup(300, 250, 30);

        //coffee
        Cup c1 = new CoffeeCup(300, 250, 30); //volume greater than sipsize
        c1.takeOneSip();
        System.out.println(c1.toString());
        System.out.println(c1.addLiquid(100));
        
        Cup c2 = new CoffeeCup(300, 30, 30); //volume equal to sipsize
        c2.takeOneSip();
        System.out.println(c2.toString());
        System.out.println(c2.addLiquid(300));

        Cup c3 = new CoffeeCup(300, 20, 30); //volume less than sipsize
        c3.takeOneSip();
        System.out.println(c3.toString());
        System.out.println(c3.addLiquid(100));

        //tea
        Cup c4 = new TeaCup(200, 100, 30);
        c4.takeOneSip();
        System.out.println(c4.toString());
        System.out.println(c4.addLiquid(200));
        
        Cup c5 = new TeaCup(200, 30, 30);
        c5.takeOneSip();
        System.out.println(c5.toString());
        System.out.println(c5.addLiquid(200));

        Cup c6 = new TeaCup(200, 20, 30);
        c6.takeOneSip();
        System.out.println(c6.toString());
        System.out.println(c6.addLiquid(100));

        //espresso
        Cup c7 = new EspressoCup(100, 70, 30);
        c7.takeOneSip();
        System.out.println(c7.toString());
        System.out.println(c7.addLiquid(100));
        
        Cup c8 = new EspressoCup(100, 30, 30);
        c8.takeOneSip();
        System.out.println(c8.toString());
        System.out.println(c1.addLiquid(100));

        Cup c9 = new EspressoCup(100, 20, 30);
        c9.takeOneSip();
        System.out.println(c9.toString());
        System.out.println(c1.addLiquid(50));

    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup { //abstract modifier 2/2. Y
    // attributes
    protected double cap; //add visibility modifier here. 1/5 Y
    protected double volume; //add visibility modifier here. 2/5 Y

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given. inheritance 1/3 Y
class CoffeeCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here 3/5 Y.

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if (super.volume => sipsize) {
            super.volume -= sipsize;\
            return sipsize;
        } else {
            return 0;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of coffee";
    }
}

// TeaCup class: add what is missing based on the diagram given. inheritance 2/3 Y.
class TeaCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here. 4/5 Y

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if (super.volume => sipsize) {
            super.volume -= sipsize;\
            return sipsize;
        } else {
            return 0;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of tea."; 
    }
}

// EspressoCup class: add what is missing based on the diagram given 3/3. Y
class EspressoCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here 5/5 Y.

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        if (super.volume => sipsize) {
            super.volume -= sipsize;\
            return sipsize;
        } else {
            return 0;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + super.volume + " ml of espresso."; 
    }
}