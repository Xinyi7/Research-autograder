public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
         Cup c1 = new CoffeeCup(300, 250, 30);
         System.out.println(c1); //250
         c1.addLiquid(50);
         System.out.println(c1); //300
         c1.takeOneSip();
         System.out.println(c1); //270

          Cup c2 = new CoffeeCup(300, 100, 101);
         System.out.println(c2); //100
         c2.addLiquid(201);
         System.out.println(c2); //100
         c2.takeOneSip();
         System.out.println(c2); //100

         
          Cup c3 = new CoffeeCup(300, 100, 300);
         System.out.println(c3); //100
         c3.addLiquid(200);
         System.out.println(c3); //300
         c3.takeOneSip();
         System.out.println(c3); //0
        
         
         Cup t1 = new TeaCup(100,50,10);
          System.out.println(t1); //50
         t1.addLiquid(55);
         System.out.println(t1); //50
         t1.addLiquid(30);
         System.out.println(t1); //80
          t1.takeOneSip();
          System.out.println(t1); //70

         Cup t2 = new TeaCup(300, 100, 101);
         System.out.println(t2); //100
         t2.addLiquid(201);
         System.out.println(t2); //100
         t2.takeOneSip();
         System.out.println(t2); //100

         
          Cup t3 = new TeaCup(300, 100, 300);
         System.out.println(t3); //100
         t3.addLiquid(200);
         System.out.println(t3); //300
         t3.takeOneSip();
         System.out.println(t3); //0
          
         Cup e1 = new EspressoCup(50,20,5);
          System.out.println(e1); //20
          e1.addLiquid(55);
         System.out.println(e1);//20
         e1.addLiquid(30);
         System.out.println(e1);//50
          e1.takeOneSip();
          System.out.println(e1); //45

         Cup e2 = new EspressoCup(300, 100, 101);
         System.out.println(e2); //100
         e2.addLiquid(201);
         System.out.println(e2); //100
         e2.takeOneSip();
         System.out.println(e2); //0

         
          Cup e3 = new EspressoCup(300, 100, 300);
         System.out.println(e3); //100
         e3.addLiquid(200);
         System.out.println(e3); //300
         e3.takeOneSip();
         System.out.println(e3); //0
          
         
         
    
         

    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup {
    // attributes
    protected double cap; //add visibility modifier here
    protected double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public abstract double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given
class CoffeeCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if(volume<sipsize){
        return 0;
        }
        else{
            volume-=sipsize;
            return sipsize;
            }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+volume+ " ml of coffee.";
    }
}

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if(volume<sipsize){
        return 0;
        }
        else{
            volume-=sipsize;
            return sipsize;
            }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+volume+ " ml of tea."; 
    }
}

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup {
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
           if(volume<sipsize){
            volume=0;
            return volume;
        }
        else{
            volume-=sipsize;
            return sipsize;
            }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+volume+ " ml of espresso."; 
    }
}