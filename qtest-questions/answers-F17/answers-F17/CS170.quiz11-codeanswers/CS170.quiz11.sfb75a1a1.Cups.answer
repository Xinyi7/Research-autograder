public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
        // Cup c1 = new CoffeeCup(300, 250, 30);
        Cup c1 = new CoffeeCup(300, 250, 30);
        System.out.println(c1.toString());
        c1.printResult();

        Cup c2 = new Teacup(200, 150, 20);
        System.out.println(c2.toString());
        c2.printResult();

        Cup c3 = new EspressoCup(100, 50, 10);
        System.out.println(c3.toString());
        c3.printResult();

    }
}

// Cup abstract class: add what is missing based on the given diagram
class Cup {
    // attributes
    double cap; //add visibility modifier here
    double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given
abstract class CoffeeCup {

    protected String name;

    public String toString() {
        return name;
    }
    public abstract void printResult();
    // attributes
    double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup extends Cup {
        // to be implemented(

        private int c1;
        private int c2;

        public Cup(double c, double v, double s)
            super.name = c;
            c1 = v1;
            c2 = v2;
            
    }
     public String toString() {
        return c1+" "+ super.toString()+" "+ c2;
     }
     public void printResult() {
        int result= c1+c2;
        System.out.print.ln(result);
     }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        return 1;
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
  

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup {
    // attributes
    private double c1;
    private double c2;
    double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.name = c1;
        c1 = v1;
        c2 = v2;
        
    }
   public String toString() {
        return c1+" "+ super.toString()+" "+ c2;
     }
     public void printResult() {
        int result= c1+c2;
        System.out.print.ln(result);
     }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        return 0;
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup {
    // attributes
    private double c1;
    private double c2;
    double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        public TeaCup(double c, double v, double s) {
        // to be implemented
        super.name = c1;
        c1 = v1;
        c2 = v2;
        
    }
   public String toString() {
        return c1+" "+ super.toString()+" "+ c2;
     }
     public void printResult() {
        int result= c1+c2;
        System.out.print.ln(result);
     }

    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        return 0;
    }

  