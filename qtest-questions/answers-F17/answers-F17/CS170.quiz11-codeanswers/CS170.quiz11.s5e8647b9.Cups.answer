public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
         Cup c1 = new CoffeeCup(300, 250, 30);
         System.out.println(c1.takeOneSip());
         System.out.println(c1.toString());

          Cup c2 = new TeaCup(200, 50, 10);
         System.out.println(c2.takeOneSip());
         System.out.println(c2.toString());

          Cup c3 = new EspressoCup(100, 90, 30);
         System.out.println(c3.takeOneSip());
         System.out.println(c3.toString());

    }
}

abstract class Cup {
    // attributes
   protected double cap; 
    protected double volume; 
    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public abstract double takeOneSip();

}



class CoffeeCup extends Cup {
    // attributes
   private double sipsize; 

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if(volume<sipsize){
            return 0;
        }else{
            volume-=sipsize;
            return sipsize;
        }
       
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+ volume +" ml of coffee.";
    }
}


class TeaCup extends Cup {
    // attributes
    private double sipsize; 

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
        
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
         if(volume<sipsize){
            return 0;
        }else{
            volume-=sipsize;
            return sipsize;
        }
      
       
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+ volume +" ml of tea."; 
    }
}


class EspressoCup extends Cup{
    // attributes
   private double sipsize; 

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
       if(volume<sipsize){
            return 0;
        }else{
            volume-=sipsize;
            return sipsize;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+ volume+" ml of espresso."; 
    }
}