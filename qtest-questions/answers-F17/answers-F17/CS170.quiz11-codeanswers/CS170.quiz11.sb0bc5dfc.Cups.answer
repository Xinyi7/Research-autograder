public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
         System.out.println("----coffee----");
         Cup c1 = new CoffeeCup(300, 250, 30);
         System.out.println(c1);
         c1.takeOneSip();
         System.out.println(c1);
         c1.addLiquid(30);
         System.out.println(c1);

         System.out.println("----tea----");
         Cup c2 = new TeaCup(400, 100, 50);
         System.out.println(c2);
         c2.takeOneSip();
         System.out.println(c2);
         c2.takeOneSip();
         System.out.println(c2);
         c2.addLiquid(500);
         System.out.println(c2);
         


         System.out.println("----espresso----");
         Cup c3 = new EspressoCup(100, 70, 20);
         System.out.println(c3);
         c3.takeOneSip();
         System.out.println(c3);
         c3.addLiquid(40);
         System.out.println(c3);
/*
        System.out.println("----test espresso sipsize----");
        Cup c4 = new EspressoCup(50, 50, 26);
         System.out.println(c4);
         c4.takeOneSip();
         System.out.println(c4);
         System.out.println(c4.takeOneSip());
         System.out.println(c4);         
*/        



    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup {
    // attributes
    protected double cap; //add visibility modifier here
    protected double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) { //DO I NEED TO ADD THIS TO METHODS BELOW???
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    abstract public double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given
class CoffeeCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        this.sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if(volume<sipsize){
            return 0.0;
        } else {
            volume -= sipsize;
        }
        return sipsize;
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */

    public String toString() {
        // to be implemented
        return "This cup contains " + volume + " ml of coffee.";
    }
}

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        this.sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if(volume<sipsize){
            return 0.0; 
        } else {
            volume -= sipsize;
            return sipsize; 
        }
    } 

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains "+volume+ " ml of tea."; 
    }
}

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup{ //should these be public? they're not in the diagram
    // attributes
    double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap=c;
        super.volume=v;
        this.sipsize=s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        double released;
        if(volume<sipsize){
            released=volume;
            volume=0; 
        } else {
            released = sipsize;
            volume-=sipsize;
        }
        return released;
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + volume + " ml of espresso."; 
    }
}