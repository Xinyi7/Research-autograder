public class Main {
    public static void main (String[] args){
        // Test your classes and methods here
        // Example of object creation:
        // Cup c1 = new CoffeeCup(300, 250, 30);
        System.out.println("---Testing Polymorphism---");
        Cup c1 = new CoffeeCup(300, 250, 30);
        System.out.println(c1);
        Cup c2 = new TeaCup(250, 200, 20);
        System.out.println(c2);
        Cup c3 = new EspressoCup(400, 350, 40);
        System.out.println(c3);
        // --- Test CoffeeCup ---
        System.out.println("---Testing CoffeeCup---");
        CoffeeCup cc1 = new CoffeeCup(300, 250, 30);
        System.out.println(cc1);
        System.out.println("Liquid released: " + cc1.takeOneSip());
        System.out.println(cc1);
        System.out.println("Liquid added: " + cc1.addLiquid(31));
        System.out.println(cc1);
        System.out.println("Liquid added: " + cc1.addLiquid(300));
        System.out.println(cc1);
        CoffeeCup cc2 = new CoffeeCup(300, 20, 30);
        System.out.println(cc2);
        System.out.println("Liquid released: " + cc2.takeOneSip());
        System.out.println(cc2);
        System.out.println("Liquid added: " + cc2.addLiquid(10));
        System.out.println(cc2);
        System.out.println("Liquid released: " + cc2.takeOneSip());
        System.out.println(cc2);
        // --- Test TeaCup ---
        System.out.println("---Testing TeaCup---");
        TeaCup tc1 = new TeaCup(300, 250, 30);
        System.out.println(tc1);
        System.out.println("Liquid released: " + tc1.takeOneSip());
        System.out.println(tc1);
        System.out.println("Liquid added: " + tc1.addLiquid(31));
        System.out.println(tc1);
        System.out.println("Liquid added: " + tc1.addLiquid(300));
        System.out.println(tc1);
        TeaCup tc2 = new TeaCup(300, 20, 30);
        System.out.println(tc2);
        System.out.println("Liquid released: " + tc2.takeOneSip());
        System.out.println(tc2);
        System.out.println("Liquid added: " + tc2.addLiquid(10));
        System.out.println(tc2);
        System.out.println("Liquid released: " + tc2.takeOneSip());
        System.out.println(tc2);
        // --- Test EspressoCup ---
        System.out.println("---Testing EspressoCup---");
        EspressoCup ec1 = new EspressoCup(300, 250, 30);
        System.out.println(ec1);
        System.out.println("Liquid released: " + ec1.takeOneSip());
        System.out.println(ec1);
        System.out.println("Liquid added: " + ec1.addLiquid(31));
        System.out.println(ec1);
        System.out.println("Liquid added: " + ec1.addLiquid(300));
        System.out.println(ec1);
        EspressoCup ec2 = new EspressoCup(300, 20, 30);
        System.out.println(ec2);
        System.out.println("Liquid released: " + ec2.takeOneSip());
        System.out.println(ec2);
        System.out.println("Liquid added: " + ec2.addLiquid(10));
        System.out.println(ec2);
        System.out.println("Liquid released: " + ec2.takeOneSip());
        System.out.println(ec2);
    }
}

// Cup abstract class: add what is missing based on the given diagram
abstract class Cup {
    // attributes
    protected double cap; //add visibility modifier here
    protected double volume; //add visibility modifier here

    /**
     * @param amount is the amount of liquid to be added
     * increases volume by amount and 
     * @return true if there is room in the cup
     * @return false otherwise
     */
    public boolean addLiquid(double amount) {
        if (volume + amount <= cap) {
            volume += amount;
            return true;
        } else {
            return false;
        }

    }

    /**
     * @return the amount of liquid released
     */
    public abstract double takeOneSip();

}


// CoffeeCup class: add what is missing based on the diagram given
class CoffeeCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new coffee cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public CoffeeCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink coffee grounds!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released
     */
    public double takeOneSip() {
        // to be implemented
        if (volume - sipsize < 0) {
            return 0;
        } else {
            volume -= sipsize;
            return sipsize;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of coffee.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + volume + " ml of coffee.";
    }
}

// TeaCup class: add what is missing based on the diagram given
class TeaCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new tea cup.
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public TeaCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip,
     * @return zero. (No one wants to drink tea leaves!)
     * If volume is at least sipsize, reduce the volume by sipsize, and
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
         if (volume - sipsize < 0) {
            return 0;
        } else {
            volume -= sipsize;
            return sipsize;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of tea.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + volume + " ml of tea."; 
    }
}

// EspressoCup class: add what is missing based on the diagram given
class EspressoCup extends Cup{
    // attributes
    private double sipsize; //add visibility modifier here

    // Constructor
    /**
     * creates a new espresso cup. 
     * @param c - the capacity of the cup
     * @param v - the volume of liquid in the cup
     * @param s - the size (volume) of a sip
     */
    public EspressoCup(double c, double v, double s) {
        // to be implemented
        super.cap = c;
        super.volume = v;
        sipsize = s;
    }

    /**
     * If there is not enough liquid in the cup to release a sip of sipsize,
     * set the volume to zero and release the available liquid.
     * If volume is at least sipsize, reduce the volume by sipsize
     * and release sipsize. 
     * @return the amount of liquid released.
     */
    public double takeOneSip() {
        // to be implemented
        if (volume - sipsize < 0) {
            double x = volume;
            volume = 0;
            return x;
        } else {
            volume -= sipsize;
            return sipsize;
        }
    }

    /**
     * 
     * @return current cup volume information in the following format:
     * This cup contains volume ml of espresso.
     */
    public String toString() {
        // to be implemented
        return "This cup contains " + volume + " ml of espresso."; 
    }
}