public class Main {
    
    public static void main (String[] args) {
 
        HotelStay h = new HotelStay("DoubleTree", "Austin", 3, 500);
        System.out.println(h);              

        RewardsMember member = new RewardsMember("Willie Nelson");
        System.out.println("Random city: " + member.getRandomCity());
        
        member.addHotelStay("DoubleTree", "Austin", 3, 500);
        member.addHotelStay("Hilton", "Dallas", 2, 400);
        member.addHotelStay("Marriott", "Houston", 1, 200);
        
        System.out.println(member);

        for (int i = 0; i < 5; i++) {
            System.out.println("Random city: " + member.getRandomCity());
        }
    }
}

/* first class*/
class HotelStay {

    String hotel; 
    String city; 
    int nights;
    int points;
    
    /**
     * creates a new hotel stay. 
     * @param h - the name of the hotel chain
     * @param c - the city of the stay
     * @param n - the number of nights at the hotel
     * @param p - points earned per night    
     */
    public HotelStay(String h, String c, int n, int p){
        hotel=h;
        city=c;
        this.nights=n;
        this.points=p;
        // to be implemented
    }

    /**
     * 
     * @return the hotel stay information in the following example format:
     * 5 night stay at the Marriott hotel in Atlanta (300 points per night)
     */
    public String toString(){
        return ""+ nights + " night stay at the Marriot hotel in Atlanta ("+ points + " points per night";
       
    }
    
}
 
/*  Second class */ 
class RewardsMember {

    private String name;
    private HotelStay[] stays;
    private int numStays;
    
    /**
     * Creates a new member with an empty list of hotel stays.
     * Note: a member will never have more than 1000 hotel stays.
     * @param n - the member's name
     */
    public RewardsMember(String name){
        HotelStay[] stays= HotelStay[1000];
        String n= name; 
        int numStays=0;
        // to be implemented
    }
    
    /**
     * creats a new HotelStay, and adds it to stays, and updates numStays
     * @param hotel - the name of the hotel chain
     * @param city - the city of the stay
     * @param nights - the number of nights at the hotel
     * @param points - points earned per night    
     */
    public void addHotelStay(String hotel, String city, int nights, int points){
        stays[numStays]= HotelStay (hotel, city, nights, points); 
        numStays++;
        // to be implemented
    }    

    /**
     * 
     * @return the total number of points accumulated
     * based on the hotel stays recorded.
     */
    public int getTotalPoints() {
        int count=0; 
         for (int j=0; j<numStays; j++) { 
            count+=stays[j].points;
         }
      
        return count;
    }

    /**
     * @return a random city chosen from those where this RewardMember ever stayed.
     *         If the number of stays is 0, return an empty String.
     */
    public String getRandomCity() {
        int count1;
        for (int i=0; i<numStays; i++) { 
            if (stays[i].city != stays[i+1].city) { 
                count1++;
            }
        }
        if (count =0) { 
            return ""; 
        }
        else { 
           
            int random= (int) Math.random () *numStays;
            
            return stays[random].city;
        }
        
    }

    /**
     * 
     * @return a string reporting the member name and total points earned 
     * (should call the getTotalPoints() method).
     */
    public String toString() {
        return "" + this.name + " " getTotalPoints(); 
        // to be implemented
      
    }
}